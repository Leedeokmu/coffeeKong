buildscript {
	ext {
		springBootVersion = '2.1.1.RELEASE'
        mooworkVersion = '1.2.0'
	}
	repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.springframework:springloaded:1.2.6.RELEASE")
        classpath("com.moowork.gradle:gradle-node-plugin:${mooworkVersion}")
	}
}
plugins {
    id 'org.springframework.boot' version '2.1.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
}

apply plugin: 'java'
apply plugin: 'com.moowork.node'
apply plugin: 'application'

project.ext{
	springSessionVersion = '1.1.1.RELEASE'
}

mainClassName = 'com.coffeekong.AppConfig'
group = 'com.coffeekong'
version = '1.0.3'
sourceCompatibility = '1.8'

springBoot {
	buildInfo()
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
	mavenCentral()
}

final String DEFAULT_PROFILE = 'dev'
if(!project.hasProperty('profile') || !profile){
	ext.profile = DEFAULT_PROFILE
}

sourceSets{
	main{
		resources{
			srcDirs = [
			        "src/main/resources-${profile}",
					"src/main/resources",
			]
		}
	}
	test{
		resources{
			srcDirs = [
					"src/main/resources-${profile}",
					"src/main/resources",
			]
		}
	}
}

dependencies {
	testCompile('org.springframework.boot:spring-boot-starter-test')
	// spring boot essentials
	implementation('org.springframework.boot:spring-boot-starter')
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation('org.springframework.boot:spring-boot-starter-cache')
	implementation("org.springframework.boot:spring-boot-starter-aop")
	implementation('org.springframework.boot:spring-boot-starter-json')
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
	implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
//	runtimeOnly('org.springframework.boot:spring-boot-starter-actuator')
	runtimeOnly('org.springframework.boot:spring-boot-devtools')
	// Ehcache
	implementation('javax.cache:cache-api:1.1.0')
	implementation('org.ehcache:ehcache:3.6.2')
	// lombok
	implementation 'org.projectlombok:lombok:1.18.4'
	annotationProcessor 'org.projectlombok:lombok:1.18.4'
	// mysql connector
	implementation 'mysql:mysql-connector-java:5.1.36'
}

test {
	useJUnitPlatform()
}

// react 빌드 생성
print 'profile : ' + profile
def webappDir = "$projectDir/src/main/webapp/front"
node {
	version = '10.16.0'
	download = true
	workDir = file("${project.buildDir}/nodejs")
	npmWorkDir=file("${project.buildDir}/npm")
}
if( profile != 'dev'){
	task appNpmInstall(type: NpmTask) {
		workingDir = file(webappDir)
		args = ["install"]
	}

	task appNpmBuild(type: NpmTask) {
		workingDir = file(webappDir)
		args = ['run', 'build']
	}

	task copyWebApp(type: Copy) {
		from "src/main/webapp/front/build" into 'src/main/resources/templates/.'
	}

	appNpmBuild.dependsOn appNpmInstall
	copyWebApp.dependsOn appNpmBuild
	compileJava.dependsOn copyWebApp
}